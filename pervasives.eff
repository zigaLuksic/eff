
(* Top level effects. *)
effect Print : string -> unit

effect Read : unit -> string

effect Raise : string -> empty

effect RandomInt : int -> int

effect RandomFloat: float -> float

(* Integers and Floats *)
external ( = ) : int -> int -> bool = "="

external ( < ) : int -> int -> bool = "<"

external ( =. ) : float -> float -> bool = "="

external ( <. ) : float -> float -> bool = "<"

external infinity : float = "infinity"

external neg_infinity : float = "neg_infinity"

external nan : float = "nan"

effect InvalidArgument : string -> empty

effect Failure : string -> empty

effect AssertionFault: unit -> empty

let assert : bool -> unit!{AssertionFault} =
  fun b -> if b then () else (match (!AssertionFault ()) with);;

external ( ~- ) : int -> int = "~-"

external ( + ) : int -> int -> int = "+"

external ( * ) : int -> int -> int = "*"

external ( - ) : int -> int -> int = "-"

external ( mod ) : int -> int -> int = "mod"

external ( ~-. ) : float -> float = "~-."

external ( +. ) : float -> float -> float = "+."

external ( *. ) : float -> float -> float = "*."

external ( -. ) : float -> float -> float = "-."

external ( /. ) : float -> float -> float = "/."

external ( ** ) : int -> int -> int = "**"

external ( / ) : int -> int -> int = "/"

external exp : float -> float = "exp"

external expm1 : float -> float = "expm1"

external log : float -> float = "log"

external log1p : float -> float = "log1p"

external cos : float -> float = "cos"

external sin : float -> float = "sin"

external tan : float -> float = "tan"

external acos : float -> float = "acos"

external asin : float -> float = "asin"

external atan : float -> float = "atan"

external sqrt : float -> float = "sqrt"
                               
(* Strings *)
external float_of_int : int -> float = "float_of_int"

external int_of_float : float -> int = "int_of_float"

external ( ^ ) : string -> string -> string = "^"

external string_length : string -> int = "string_length"

external string_of_float : float -> string  = "string_of_float"

external string_of_int : int -> string  = "string_of_int"


(* Booleans *)
let (not : bool -> bool) x = if x then false else true

let ((>) : int -> int -> bool) x y = y < x


let ((<=) : int -> int -> bool) x y =
  let lt = x < y in
  let eq = x = y in
  lt || eq

let ((>=) : int -> int -> bool) x y = (y <= x)

let ((<>) : int -> int -> bool) x y = not (x = y)

let ((>.) : float -> float -> bool) x y = y <. x

let ((<=.) : float -> float -> bool) x y =
  let lt = x <. y in
  let eq = x =. y in
  lt || eq

let ((>=.) : float -> float -> bool) x y = (y <=. x)

let ((<>.) : float -> float -> bool) x y = not (x =. y)

(* Option *)
type +'a option = None | Some of 'a

(* Lists *)

let rec (range : int -> int -> int list) m n =
  if m > n then []
  else m :: range (m + 1) n

(* Basic functions *)
let abs : int -> int = fun x -> if x < 0 then -x else x

let min : int -> int -> int = fun x y -> if x < y then x else y

let max : int -> int -> int = fun x y -> if x < y then y else x

let odd : int -> bool = fun x -> (x mod 2 = 1)

let even : int -> bool = fun x -> (x mod 2 = 0)


(* Prints *)

let print_int : int -> unit!{Print} = fun x -> !Print (string_of_int x)

let print_string : string -> unit!{Print} = fun str -> !Print str

let print_endline : string -> unit!{Print} = fun str -> !Print (str ^ "\n")
